//package com.example.demo.service.jms;
//
//import jakarta.jms.JMSException;
//import jakarta.jms.Session;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.jms.annotation.JmsListener;
//import org.springframework.jms.core.JmsTemplate;
//import org.springframework.retry.support.RetryTemplate;
//import org.springframework.stereotype.Service;
//
//import java.util.ArrayList;
//import java.util.List;
//import java.util.UUID;
//import java.util.concurrent.CompletableFuture;
//import java.util.concurrent.ConcurrentLinkedQueue;
//import java.util.concurrent.ExecutorService;
//
//@Service
//public class JmsServiceRetryAsync {
//    private static final Logger logger = LoggerFactory.getLogger(JmsServiceRetryAsync.class);
//
//    @Value("${jms.sqs.queue.name}")
//    private String queueName;
//
//    @Value("${jms.sqs.dlq.name}")
//    private String dlqName;
//
//    @Autowired
//    private JmsTemplate jmsTemplate;
//
//    @Autowired
//    private RetryTemplate retryTemplate;
//
//    @Autowired
//    private ExecutorService executorService;
//
//    private final ConcurrentLinkedQueue<InternalQueueMessage> internalQueue = new ConcurrentLinkedQueue<>();
//
//    public void sendMessage(String message) {
//        jmsTemplate.convertAndSend(queueName, message);
//    }
//
//    public void sendToDlq(String message) {
//        jmsTemplate.convertAndSend(dlqName, message);
//    }
//
//    @JmsListener(destination = "${jms.sqs.queue.name}")
//    public void receiveMessage(String message, Session session) throws JMSException {
//        String threadName = Thread.currentThread().getName();
//        logger.info("Received message from {}: {} on thread: {}", queueName, message, threadName);
//
//        String messageId = UUID.randomUUID().toString();
//        InternalQueueMessage internalQueueMessage = new InternalQueueMessage(messageId, message, Thread.currentThread().getName(), InternalQueueMessage.Status.PENDING);
//        internalQueue.add(internalQueueMessage);
//        // System.out.println("Internal queue : " + getReceivedMessages());
//
//        processMessageWithRetry(message, internalQueueMessage);
//    }
//
//    private void processMessageWithRetry(String message, InternalQueueMessage internalQueueMessage) {
//        try {
//            // Attempt to process the message
//            processMessage(message);
//            // Set status to SUCCESS if processing is successful
//            internalQueueMessage.setStatus(InternalQueueMessage.Status.SUCCESS);
//        } catch (Exception e) {
//            // Log the exception if initial processing fails
//            logger.error("Exception occurred while processing the first time: {}", e.getMessage());
//
//            // Retry processing asynchronously using CompletableFuture
//            CompletableFuture.runAsync(() -> {
//                // Use RetryTemplate to retry the message processing
//                retryTemplate.execute(context -> {
//                    // Set status to PROCESSING during retry attempts
//                    internalQueueMessage.setStatus(InternalQueueMessage.Status.PROCESSING);
//                    try {
//                        // Log the retry attempt with the current thread name
//                        String threadName = Thread.currentThread().getName();
//                        logger.info("Retrying message: {} on thread: {}", message, threadName);
//                        // Attempt to process the message again
//                        processMessage(message);
//                    } catch (Exception ex) {
//                        // Log the exception if retry fails and throw a RuntimeException
//                        logger.error("Exception occurred while retrying: {}", ex.getMessage());
//                        throw new RuntimeException(ex);
//                    }
//                    return null;
//                });
//            }, executorService).exceptionally(ex -> {
//                // Handle the exception if all retry attempts are exhausted
//                logger.error("Retry attempts exhausted. Sending message to DLQ: {} errorMessage: {}", message, ex.getMessage());
//                // Set status to FAILURE and send the message to DLQ
//                internalQueueMessage.setStatus(InternalQueueMessage.Status.FAILURE);
//                sendToDlq(message);
//                return null;
//            });
//        }
//    }
//
//    public void processMessage(String message) {
//        try {
//            logger.info("Processing message: {}", message);
//            Thread.sleep(10000); // Simulate delay of 5 seconds
//        } catch (InterruptedException e) {
//            Thread.currentThread().interrupt();
//            throw new RuntimeException("Thread was interrupted", e);
//        }
//        throw new RuntimeException("exception thrown test");
//    }
//
//    public List<InternalQueueMessage> getReceivedMessages() {
//        return new ArrayList<>(internalQueue);
//    }
//
//    public InternalQueueMessage getMessageById(String id) {
//        return internalQueue.stream()
//                .filter(message -> message.getId().equals(id))
//                .findFirst()
//                .orElse(null);
//    }
//}
//
//// The processMessageWithRetry method is designed to process a message and handle any exceptions that occur during processing. If an exception occurs, it retries the message processing asynchronously using a RetryTemplate and an ExecutorService. Here is a detailed breakdown of the code:
//// Initial Message Processing:
//// The method processMessageWithRetry is called with a message and an InternalQueueMessage object.
//// It first attempts to process the message by calling processMessage(message).
//// If the message is processed successfully, it sets the status of internalQueueMessage to SUCCESS.
//// Exception Handling:
//// If an exception occurs during the initial processing, it logs the error message.
//// It then uses CompletableFuture.runAsync to retry the message processing asynchronously.
//// Asynchronous Retry:
//// CompletableFuture.runAsync takes two arguments:
//// A Runnable task that contains the retry logic.
//// An ExecutorService to manage the asynchronous execution of the task.
//// The retryTemplate.execute method is used to retry the message processing.
//// It sets the status of internalQueueMessage to PROCESSING.
//// It logs the retry attempt and calls processMessage(message) again.
//// If an exception occurs during the retry, it logs the error and throws a RuntimeException.
//// Handling Retry Exhaustion:
//// The exceptionally method of CompletableFuture is used to handle any exceptions that occur during the asynchronous task.
//// If all retry attempts are exhausted, it logs the error message, sets the status of internalQueueMessage to FAILURE, and sends the message to the Dead Letter Queue (DLQ) using sendToDlq(message).