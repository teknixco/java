Learn REST API with Java, Spring Framework & JPA Using JSON. Spring AOP, Lombok, Swagger, Logging, JPQL, MySQL, Heroku

REST = Representational State Transfer

SOAP vs REST
SOAP - has only XML data format but REST has XML or JSON
REST is easier to implement/consume than SOAP

JSON
-Key-value pair similar to Map that we have in Java, only difference is Java has values of different data types but JSON has Array, String,Integer,Double as value data type.

What is Spring Boot?
-based on Spring Framework
-Requires less configuration.
-Properties file key/value pair
-key=value syntax

-@Value("${property.name:Default Value}")
 -annotation to get properties into Java.
 -set default value after colon.
 -only works with the Spring-managed beans, not POJOs

-server.port=0 (run on random ports)
java -jar springapp.jar -Dserver.port=8081

@JSonIgnore annotation are for fields you don't want to return in the JSON Response. (From Jackson library)

Project Lombok
-built with Java
-to avoid boilerplate code, use Project Lombok
-Getters, Setters, Constructors are easy to have with just annotations.
-Can be used in any Java Application (Spring, Sprint Boot, Sling, etc, any Java app)
-add Lombok dependency in Maven project
-(may need to install Project Lombok locally and link IDE)
-@Getter, @Setter can be specified on individual fields as needed or on the Class level for all fields.
-@ToString, @EqualsAndHashCode are also optional annotations.
-@Data adds all of the above 4 annotations.
-@AllArgsConstructor and @NoArgsConstructor can be used to add constructors.

JPA Introduction
-JPA stands for Java Persistence API (interface)
-ORM stands for Object Relational Mapping - maps class/fields -> table/columns in database
-Hibernate is one of the implementations of JPA.
-JPQL - Java Persistence Query Language (similar to SQL), refer to class instead of table, refer to variables inside the class instead of columns.

-@NotBlank/@NotNull used to require a field/key is present in payload. @NotBlank(message = "Field is required")
-@NotBlank for Strings and @NotNull for longs/doubles
-@Valid required next to @RequestBody for Get/Post/etc mappings for validation to take place.

Relationships
-1-1 @OnetoOne, @JoinColumn(name="<foreignKeyColumnNameInDB>") (owning side)
-1-1 <-> @OnetoOne(mappedBy="<keyFromOwningSide>") <-- on non-owning side
-1-many - @ManyToOne, @JoinColumn(name="<foreignKeyColumnNameInDB>") (owning side)
-1-many <-> "private List<<Class>> nameOfVariable", @OneToMany(mappedBy="<keyFromOwningSide>") < -- on non-owning side
i.e. 
Student (owning side) 1-1 relationship
Address (non owning side) 1-1 relationship
Subject (owning side) many-1 relationship
Student (non owning side) 1-many relationship

Importance of API Documentation (Swagger UI)
-Consumer should know what APIs are provided
-Consumer should know 
  -the URL for the API, and 
  -what needs to be passed in the request payload and 
  -what to expect in return.
-Swagger UI 
  -builds documentation for APIs automatically
  -can detect updates from the API
  -also works just like Postman, can send requests (consume the API)
  -very little configuration (just add 3 dependencies, springfox-boot-starter, springfox-swagger2, springfox-swagger-ui (groupId = io.springfox), version 3+).
  -then enable Swagger in the main class of the SpringBoot App. @EnableSwagger2 
  -application.properties
	spring.mvc.pathmatch.matching-strategy=ant_path_matcher;
  -bean configuration 
		@Bean
		public Docket api() {
			return new Docket(DocumentationType.SWAGGER_2)
					.select()
					.apis(RequestHandlerSelectors.any())
					.paths(PathSelectors.any())
					.build();
		}

-OpenAPI
   <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-ui</artifactId>
      <version>1.6.6</version>
   </dependency>
https://springdoc.org/

Logging Level Hierarchy
Error < Warn < Info < Debug < Trace
-By default Spring Boot uses the Info logging level (comes with Warn & Error also).
-You can have different log levels for different packages and classes.
-Create log file which contains all logs for Spring Boot Application.
-spring-boot-starter-web comes with the following logging libraries:
-logback, log4j, log4j to slf4j, jul to slf4j
-SLF4J 
Logger logger = LoggerFactory.getLogger(StudentController.class [OR] getClass() [From Object class]);

To Add Log File, add to application.properties file
logging.file.name=app.log
logging.file.max-size
logging.file.max-history(in days)
logging.file.path


Aspect-Oriented Programming (AOP)
-separates logic and provides modularity
-Set PointCuts and JoinPoints and advices (before, after, afterreturn, around)
-Before Advice will run before the method's statement block starts.
-@Configuration
-@Aspect
-@Before(value = "execution(* com.yourpackagename.*.*(..)) and args(object)")
public void beforeAdvice (JoinPoint joinPoint, Object object) {
	// add actions i.e. logger.info("Request = "+ object);
}
@After
-After Advice will run before the method's return statement executes.
-After Return Advice will run after the method's return statement executes.
-@AfterReturning
-For After Return, add , returning = "returningObject" after value in the Advice attributes to pass the return value to the Advice method.
-Around Advice is a combination of @Before and @AfterReturn Advices.
-@Around
public void aroundAvice (ProceedingJoinPoint proceedingJoinPoint, Object object) {
//SOME ACTION
  logger.info("Request is "+ object);
  Object returningObject = null;
  returningObject = proceedingJoinPoint.proceed(); // calls the intercepted method
  logger.info("Response is "+ returningObject);
}
// note that join points are instances of the execution control, proceeding join points are the ones for around

Spring Boot Scheduler
-performs tasks at a fixed interval
-Cron Expression https://www.baeldung.com/cron-expressions
-in main class add @EnableScheduling
-in Service layer, add "MyScheduler" class
-@Service annotation (MyScheduler class)
-add method
  @Scheduled(cron="<cron expression">) 
  public void firstScheduler() { 
    // ADD ACTIONS
  }


MORE with Spring Boot & Others
GraphQL with Spring Boot
https://www.udemy.com/course/graphql-with-java-spring-boot-query-mutation-schema-resolver-edge-jpa/?couponCode=BONUSLEC

Reports with JasperReport and Spring Boot
https://www.udemy.com/course/reporting-with-jasperreports-java-spring-boot-jasperstudio-jaspersoft/?couponCode=BONUSLEC

Java Messaging Service
https://www.udemy.com/course/java-messaging-service-spring-mvc-spring-boot-activemq/?couponCode=NOV192

Pivotal Cloud Foundry
https://www.udemy.com/course/learn-pivotal-cloud-foundry-pcf-deploy-spring-boot-spring-mvc-apps/?couponCode=NOV192

Java Interview Question
https://www.udemy.com/course/java-interview-preparation/?couponCode=NOV192

RabbitMQ with PHP - Asynchronous Messaging with PHP
https://www.udemy.com/course/rabbitmq-with-php-asynchronous-messaging-with-php/?couponCode=NOV192

Spring Framework - Social Signin, PayPal, JMS, Velocity
https://www.udemy.com/course/advanced-spring-framework/?couponCode=NOV192

Deploy NodeJS Apps to Pivotal Cloud Foundry (PCF)
https://www.udemy.com/course/learn-to-deploy-nodejs-apps-to-pivotal-cloud-foundry-pcf/?couponCode=NOV192
